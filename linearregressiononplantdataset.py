# -*- coding: utf-8 -*-
"""linearRegressionOnPlantDataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19mL9e5M9o3jfc7OVZgMwkNy-no9y0YiZ

<h1 style="color:red"> T1: Your task is to develop a machine learning model that can predict when and how much water is needed by plants based on temperature and moisture readings. The model should take in temperature and moisture readings as input and output the amount of water needed by the
plant. 
</h1>

<h1> T2: Create 80 Training Dataset and 20 Test Dataset and keep them in separate csv files

<h1> T3: Drive the model by the Test Dataset
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df  = pd.read_csv('irrigation.csv')

df.head()

df.shape

df.keys()

df.describe()

plt.figure()
sns.heatmap(df.isnull())
plt.title('Missing value in the dataset');
df.isnull().sum()

# correlation plot
corr = df.corr()
sns.heatmap(corr, annot= True);

sns.pairplot(df)

old_skew = df.skew().sort_values(ascending=False)
old_skew

plt.figure()
for i in list(enumerate(df.columns)):
    plt.subplot(1, 4, i[0]+1)
    sns.histplot(data = df[i[1]], kde=True)

plt.figure()
plt.plot(df['Date'],df['Avg_Temp_C'],linewidth=2, marker ='x')
plt.xlabel('Date')
plt.ylabel('Temperature in C')
plt.title('Day vs Temperature')

plt.figure()
plt.plot(df['Date'],df['Moisture'],linewidth=2, marker ='X')
plt.xlabel('Date')
plt.ylabel('Temperature in C')
plt.title('Day vs Temperature')

from sklearn.model_selection import train_test_split
from sklearn import preprocessing

X = df.drop(['Date','Water_needed_mL'],axis=1) 
y = df[['Water_needed_mL']] 

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=23)

X_train.to_csv('train.csv',index=False)
X_test.to_csv('test.csv',index=False)

X_train.shape,y_train.shape,X_test.shape,y_test.shape

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X_train,y_train)

print("Intercept for the model is", lin_reg.intercept_, "and the scope is",lin_reg.coef_)

# sklearn regression module
y_pred = lin_reg.predict(X_test)

#Evaluvation: MSE
from sklearn.metrics import mean_squared_error
J_mse = mean_squared_error(y_pred, y_test)

# R_square
R_square = lin_reg.score(X_test,y_test)
print('The Mean Square Error(MSE) or J(theta) is: ',J_mse)
print('R square obtain for scikit learn library is :',R_square)

print(f'Training set score:: {lin_reg.score(X_train,y_train)}')
print(f'Test set score:: {lin_reg.score(X_test,y_test)}')

x_surf, y_surf = np.meshgrid(np.linspace(df.Avg_Temp_C.min(), df.Avg_Temp_C.max(), 100),np.linspace(df.Moisture.min(), df.Moisture.max(), 100))
onlyX = pd.DataFrame({'Avg_Temp_C': x_surf.ravel(), 'Moisture': y_surf.ravel()})
fittedY=lin_reg.predict(onlyX)

fittedY=np.array(fittedY)

from mpl_toolkits.mplot3d import Axes3D


fig = plt.figure(figsize=(20,10))

ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['Avg_Temp_C'],df['Moisture'],df['Moisture'],c='red', marker='o', alpha=0.5)
ax.plot_surface(x_surf,y_surf,fittedY.reshape(x_surf.shape), color='b', alpha=0.3)
ax.set_xlabel('Avg_Temp_C')
ax.set_ylabel('Moisture')
ax.set_zlabel('Moisture')
plt.show()

# input = [[int(input()) for x in range (2)] for y in range(1)]

lin_reg.predict([[34,70]])

"""<h1> Decision tree regression"""

from sklearn.tree import DecisionTreeRegressor
dtr= DecisionTreeRegressor()
dtr.fit(X_train,y_train)

y_pred_dtr = dtr.predict(X_test)

mean_squared_error(y_pred_dtr,y_test)

y_pred_train = dtr.predict(X_train)

mean_squared_error(y_pred_train,y_train)

print(f'Training set score:: {dtr.score(X_train,y_train)}')
print(f'Test set score:: {dtr.score(X_test,y_test)}')

dtr.predict([[34,70]])

